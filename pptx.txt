\c clinic_db

set search_path=clinic_schema, public;

select pg_size_pretty(pg_database_size('clinic_db'));


\dt+

                                               List of relations
    Schema     |        Name        | Type  |  Owner   | Persistence | Access method |    Size    | Description
---------------+--------------------+-------+----------+-------------+---------------+------------+-------------
 clinic_schema | address            | table | postgres | permanent   | heap          | 464 kB     |
 clinic_schema | age_group          | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | amb_card           | table | postgres | permanent   | heap          | 1377 MB    |
 clinic_schema | area               | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | contingent         | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | department         | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | diagnos            | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | doc_type_list      | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | doctor             | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | document           | table | postgres | permanent   | heap          | 218 MB     |
 clinic_schema | hospital           | table | postgres | permanent   | heap          | 0 bytes    |
 clinic_schema | hospital_list      | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | mkb                | table | postgres | permanent   | heap          | 32 kB      |
 clinic_schema | mkb_class          | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | period_list        | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | period_type_list   | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | reg_group          | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | report_spo         | table | postgres | permanent   | heap          | 1080 kB    |
 clinic_schema | report_zab         | table | postgres | permanent   | heap          | 9624 kB    |
 clinic_schema | soput_ds           | table | postgres | permanent   | heap          | 0 bytes    |
 clinic_schema | speciality         | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | staff              | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | street             | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | talon              | table | postgres | permanent   | heap          | 3311 MB    |
 clinic_schema | target_spo         | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | tmp_address_list   | table | postgres | permanent   | heap          | 464 kB     |
 clinic_schema | tmp_fam_list       | table | postgres | permanent   | heap          | 16 kB      |
 clinic_schema | tmp_full_name_list | table | postgres | permanent   | heap          | 0 bytes    |
 clinic_schema | tmp_kv_list        | table | postgres | permanent   | heap          | 80 MB      |
 clinic_schema | tmp_mkb            | table | postgres | permanent   | heap          | 16 kB      |
 clinic_schema | tmp_name_list      | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | tmp_organization   | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | tmp_otch_list      | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | tmp_position       | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | tmp_street_list    | table | postgres | permanent   | heap          | 16 kB      |
 clinic_schema | visit              | table | postgres | permanent   | heap          | 3586 MB    |
 clinic_schema | visit_type         | table | postgres | permanent   | heap          | 8192 bytes |
 clinic_schema | zab_type           | table | postgres | permanent   | heap          | 8192 bytes |
(38 rows)


tmp_* - таблицы для генераторов данных



--Типы посещений

select* from visit_type;

 id_visit_type | name_visit_type
---------------+-----------------
             1 | в ЛПУ
             2 | на дому
(2 rows)



--Типы заболеваний

select* from zab_type;

 id_zab_type |                 name_zab_type
-------------+------------------------------------------------
           1 | острое заболевание
           2 | впервые в жизни зарегистрированное хроническое
           3 | известное ранее хроническое
           4 | обострение хронического заболевания
(4 rows)


--Возрастные группы

select* from age_group;

 id_age_group | from_age | to_age |                          name_age_group
--------------+----------+--------+------------------------------------------------------------------
            1 |       18 |     44 | молодой возраст
            2 |       45 |     59 | средний возраст
            3 |       60 |     74 | пожилой возраст
            4 |       75 |     90 | старческий возраст
            5 |       91 |    900 | долголетие
            6 |        0 |     17 | дети и подростки
(6 rows)


--Контингент

select* from contingent;

 id_cont |                name_cont
---------+------------------------------------------
       1 | пенсионер
       2 | инвалид ВОВ
       3 | участник ВОВ
       4 | вдова участника ВОВ
       5 | блокадник
       6 | награждённый орденами и медалями
       7 | инвалид труда
       8 | ребёнок-инвалид
       9 | участник боевых действий
      10 | член семьи погибшего
      11 | подвергшийся радиационному облучению
      12 | реабилитированный
      13 | подросток
      14 | призывник
      15 | ребёнок до года
      16 | прочие
(16 rows)


--Список врачей со специальностями и участками

select d.id_doctor, s.fam_doctor, s.name_doctor, s.otch_doctor, sp.name_spec, a.id_area from doctor d left join staff s on d.id_staff=s.id_staff left join speciality sp on d.id_spec=sp.id_spec left join area a on d.id_doctor=a.id_doctor order by s.fam_doctor, s.name_doctor, s.otch_doctor;
 id_doctor |  fam_doctor   | name_doctor |  otch_doctor  |  name_spec  | id_area
-----------+---------------+-------------+---------------+-------------+---------
         5 | Ависов        | Эллиот      | Эдвинович     | терапевт    |       5
        10 | Байденова     | Элис        | Чэдовна       | терапевт    |      10
         7 | Беллов        | Себастиан   | Андерсонович  | терапевт    |       7
        35 | Болдуинов     | Теренс      | Скоттович     | терапевт    |      35
        29 | Борденов      | Себастиан   | Вилфредович   | терапевт    |      29
         2 | Бридлавин     | Йен         | Эдвинович     | терапевт    |       2
        31 | Бушов         | Дуглас      | Мартинович    | терапевт    |      31
        26 | Бьюкененов    | Эвард       | Дугласович    | терапевт    |      26
        45 | Вудвордин     | Самуэль     | Абрахамович   | травматолог |
         1 | Генрин        | Кори        | Эвардович     | терапевт    |       1
         8 | Грабин        | Винсент     | Альбертович   | терапевт    |       8
        13 | Джейкобсин    | Эвард       | Арнольдович   | терапевт    |      13
        20 | Джонсонов     | Велентайн   | Тимотивич     | терапевт    |      20
        24 | Картеров      | Нейтен      | Винсентович   | терапевт    |      24
        44 | Картрайтов    | Клиффорд    | Коривич       | травматолог |
        32 | Кейсин        | Вилфред     | Генривич      | терапевт    |      32
        12 | Кларков       | Джошуа      | Томасович     | терапевт    |      12
        11 | Кларкова      | Джульет     | Остиновна     | терапевт    |      11
        39 | Колинова      | Валери      | Дэвидовна     | хирург      |
        38 | Кортнин       | Тревис      | Лукасович     | хирург      |
        48 | Крисов        | Дэвид       | Якобович      | травматолог |
        41 | Крисов        | Эдвин       | Джасперович   | хирург      |
        19 | Крузин        | Кевин       | Тревисович    | терапевт    |      19
        40 | Кубриков      | Энтони      | Лоуренсович   | хирург      |
         9 | Кулиджин      | Адриан      | Франклинович  | терапевт    |       9
        43 | Лавкрафтов    | Оскар       | Кристоферович | хирург      |
        50 | Ларамина      | Агнес       | Бенджаминовна | травматолог |
        14 | Мелодинов     | Уильям      | Джасперович   | терапевт    |      14
        22 | Мерсеров      | Себастиан   | Уильямович    | терапевт    |      22
         3 | Моссова       | Габриэль    | Сигмундовна   | терапевт    |       3
        25 | Моэмов        | Даррен      | Себастианович | терапевт    |      25
        21 | Мурманова     | Грэйс       | Андерсоновна  | терапевт    |      21
        42 | Мэдисонова    | Ариэль      | Тобиасовна    | хирург      |
         4 | Мэрионов      | Нил         | Хубертович    | терапевт    |       4
        17 | Найтлин       | Винсент     | Гарольдович   | терапевт    |      17
        23 | Нотлин        | Феликс      | Франклинович  | терапевт    |      23
        37 | Ноэльнин      | Теренс      | Бернардович   | хирург      |
        46 | Пальмерстонов | Оливер      | Стивенович    | травматолог |
        33 | Пауэрсов      | Кевин       | Эрлович       | терапевт    |      33
        34 | Пиннерин      | Винстон     | Эрлович       | терапевт    |      34
        28 | Пиннерин      | Мартин      | Вилфредович   | терапевт    |      28
         6 | Прайорина     | Джоан       | Эндрювна      | терапевт    |       6
        27 | Принсов       | Якоб        | Майклович     | терапевт    |      27
        36 | Рандолфин     | Тристан     | Арнольдович   | хирург      |
        15 | Реднаппов     | Винсент     | Томасович     | терапевт    |      15
        47 | Реднаппов     | Дональд     | Гарольдович   | травматолог |
        16 | Рендольфов    | Бернард     | Вейнович      | терапевт    |      16
        18 | Ридин         | Винсент     | Лестерович    | терапевт    |      18
        30 | Ридов         | Лестер      | Себастианович | терапевт    |      30
        49 | Рунин         | Эндрю       | Эдгарович     | травматолог |
(50 rows)



-- Классы заболеваний

 select* from mkb_class limit 10;

 id_mkb_int | id_mkb_class |                                      name_mkb_class
------------+--------------+------------------------------------------------------------------------------------------
          1 | I            | Некоторые инфекционные и паразитарные болезни
          2 | II           | Новообразования
          3 | III          | Болезни крови, кроветворных органов и отдельные нарушения, вовлекающие иммунный механизм
          4 | IV           | Болезни эндокринной системы, расстройства питания и нарушения обмена веществ
          5 | V            | Психические расстройства и расстройства поведения
          6 | VI           | Болезни нервной системы
          7 | VII          | Болезни глаза и его придаточного аппарата
          8 | VIII         | Болезни уха и сосцевидного отростка
          9 | IX           | Болезни системы кровообращения
         10 | X            | Болезни органов дыхания
(10 rows)


--Заболевания

select* from mkb limit 10;

 id_mkb |                                         ds                                         | id_mkb_int | id_spec
--------+------------------------------------------------------------------------------------+------------+---------
 J01    | Острый синусит                                                                     |         10 |       1
 J02    | Острый фарингит                                                                    |         10 |       1
 J03    | Острый тонзиллит                                                                   |         10 |       1
 J04    | Острый ларингит и трахеит                                                          |         10 |       1
 J06    | Острые инфекции верхних дыхательных путей множественной и неуточненной локализации |         10 |       1
 J09    | Грипп, вызванный выявленным вирусом зоонозного или пандемического гриппа           |         10 |       1
 J10    | Грипп, вызванный идентифицированным вирусом сезонного гриппа                       |         10 |       1
 J11    | Грипп, вирус не идентифицирован                                                    |         10 |       1
 J12    | Вирусная пневмония, не классифицированная в других рубриках                        |         10 |       1
 J13    | Пневмония, вызванная Streptococcus pneumoniae                                      |         10 |       1
(10 rows)


--Адреса

select* from address a join street s on s.id_street=a.id_street limit 10;
 id_address | id_area | id_street | num_dom | let_dom | korp_dom | str_dom | id_street | type_street | name_street
------------+---------+-----------+---------+---------+----------+---------+-----------+-------------+-------------
          1 |       1 |         1 |       1 |         |          |         |         1 | ул.         | Авангардная
          2 |       1 |         1 |       2 |         |          |         |         1 | ул.         | Авангардная
          3 |       1 |         1 |       3 |         |          |         |         1 | ул.         | Авангардная
          4 |       1 |         1 |       4 |         |          |         |         1 | ул.         | Авангардная
          5 |       1 |         1 |       5 |         |          |         |         1 | ул.         | Авангардная
          6 |       1 |         1 |       6 |         |          |         |         1 | ул.         | Авангардная
          7 |       1 |         1 |       7 |         |          |         |         1 | ул.         | Авангардная
          8 |       1 |         1 |       8 |         |          |         |         1 | ул.         | Авангардная
          9 |       1 |         1 |       9 |         |          |         |         1 | ул.         | Авангардная
         10 |       1 |         1 |      10 |         |          |         |         1 | ул.         | Авангардная
(10 rows)

clinic_db=# select* from street limit 10;
 id_street | type_street | name_street
-----------+-------------+-------------
         1 | ул.         | Авангардная
         2 | ул.         | Автоматики
         3 | ул.         | Авиационная
         4 | ул.         | Автономная
         5 | ул.         | Агатовая
         6 | ул.         | Базальтовая
         7 | ул.         | Берёзовая
         8 | ул.         | Береговая
         9 | ул.         | Верстовая
        10 | ул.         | Вокзальная
(10 rows)


-- Амбулаторные карты

select* from amb_card limit 10;

 id_card |   fam_patient   |    name_patient    |  otch_patient   |   b_date   | pol | id_address | num_kv | num_tel | id_cont |           organization           |         position         | ser_polis | num_polis | id_reg_group | create_date
---------+-----------------+--------------------+-----------------+------------+-----+------------+--------+---------+---------+----------------------------------+--------------------------+-----------+-----------+--------------+-------------
 6655242 | Аддисонов       | Дэрек              | Эдгарович       | 1976-10-14 | м   |        401 |     70 |  732012 |      16 | Rawhide                          | машинист экскаватора     | 71        |    726085 |            1 | 2019-08-20
 6655212 | Вудвордин       | Йен                | Кеннетович      | 1988-01-24 | м   |        401 |     62 |  589152 |      16 | Rawhide                          | машинист тепловоза       | 72        |    362883 |            1 | 2017-11-24
 6655217 | Беннетин        | Метью              | Эрнестович      | 1968-07-25 | м   |        401 |     64 |  899368 |      16 | Cordero Rojo                     | директор                 | 61        |    681435 |            1 | 2014-03-04
 6655238 | Аддисонов       | Кори               | Энтонивич       | 1992-11-30 | м   |        401 |     70 |  732012 |      16 | Black Thunder                    | горный инженер           | e6        |    884490 |            2 | 2018-10-18
 6655231 | Лорансов        | Велентайн          | Дугласович      | 1985-05-12 | м   |        401 |     68 |  615345 |      16 | Freedom                          | горный инженер           | e9        |    790791 |            3 | 2014-06-15
 6655190 | Джиллеттова     | Агнес              | Дэвидовна       | 1947-05-01 | ж   |        401 |     57 |  729671 |       1 | Antelope                         | бухгалтер                | 94        |    549726 |            2 | 2014-08-24
 6655248 | Бонемова        | Дебра              | Дэвидовна       | 1966-07-21 | ж   |        401 |     72 |  382952 |      16 | Belle Ayr                        | разнорабочий             | 49        |    991575 |            5 | 2017-04-30
 6655236 | Моттин          | Артур              | Кевинович       | 1967-10-30 | м   |        401 |     69 |  255164 |       9 | North Antelope Rochelle          | машинист тепловоза       | 8a        |    983670 |            2 | 2014-10-01
 6655184 | Кроулин         | Винстон            | Нейтенович      | 2001-02-28 | м   |        401 |     56 |  932790 |      14 | Rawhide                          | техник                   | 41        |    801893 |            3 | 2015-11-07
 6655240 | Аддисонов       | Лукас              | Джошуавич       | 1980-04-08 | м   |        401 |     70 |  732012 |      10 | Black Thunder                    | горный инженер           | aa        |    921029 |            4 | 2014-06-17
(10 rows)



--Талоны

select* from talon limit 10;

 id_talon | id_card | id_target | spo_type | spo | close_date | open_date
----------+---------+-----------+----------+-----+------------+------------
 97333129 | 6422008 |         6 |        2 |   1 | 2021-07-02 | 2021-07-02
 97333130 | 6422008 |         4 |        2 |   1 | 2021-05-31 | 2021-05-31
 97333131 | 6422008 |         4 |        1 |   1 | 2022-02-06 | 2022-02-06
 97333132 | 6422008 |         3 |        2 |   1 | 2022-02-23 | 2022-02-23
 97333133 | 6422008 |         5 |        2 |   1 | 2022-04-17 | 2022-04-17
 97333134 | 6422008 |         2 |        2 |   1 | 2022-08-02 | 2022-08-02
 97333136 | 6422008 |         3 |        1 |   1 | 2023-03-12 | 2023-03-12
 97333137 | 6422008 |         3 |        2 |   1 | 2023-11-06 | 2023-11-06
 97333138 | 6422008 |         3 |        2 |   1 | 2023-01-08 | 2023-01-08
 97333139 | 6422008 |         5 |        1 |   1 | 2024-01-21 | 2024-01-21
(10 rows)


select extract('year' from open_date), count(id_talon) from talon group by 1;

 extract |  count
---------+----------
    2020 |  1926135
    2021 |  1925289
    2022 | 25678669
    2023 | 25678419
    2024 |  2436509
(5 rows)


--Посещения

select* from visit limit 10;

 id_visit | id_talon | visit_date | id_visit_type | id_zab_type | id_doctor | id_mkb | next_date
----------+----------+------------+---------------+-------------+-----------+--------+-----------
 97333120 | 97333126 | 2020-06-12 |             1 |           3 |         2 | J70    |
 97333121 | 97333127 | 2020-10-01 |             1 |           2 |         6 | J90    |
 97333122 | 97333128 | 2020-01-07 |             1 |           4 |        16 | J10    |
 97333123 | 97333129 | 2021-07-02 |             1 |           2 |        30 | J47    |
 97333124 | 97333130 | 2021-05-31 |             2 |           3 |        33 | J09    |
 97333125 | 97333131 | 2022-02-06 |             1 |           3 |         9 | J46    |
 97333126 | 97333132 | 2022-02-23 |             1 |           1 |        47 | S80    |
 97333127 | 97333133 | 2022-04-17 |             1 |           3 |         4 | J47    |
 97333128 | 97333134 | 2022-08-02 |             2 |           2 |        46 | S76    |
 97333129 | 97333135 | 2023-04-27 |             2 |           3 |        33 | J01    |
(10 rows)


select extract('year' from visit_date), count(id_visit) from visit group by 1;

 extract |  count
---------+----------
    2020 |  2086849
    2021 |  2086128
    2022 | 27818195
    2023 | 27817562
    2024 |  2609282
(5 rows)









---------------------------------------------------------------------------------------------------------------------------
--ОТЧЁТ ДЛЯ ТЕСТИРОВАНИЯ
---------------------------------------------------------------------------------------------------------------------------

-- Заболеваемость (расчёт)
select ag.from_age as "с",
        ag.to_age as "до",
        left(ag.name_age_group, 18) as "Возрастная группа",
        left(cls.name_mkb_class, 32) as "Заболевание",
        ac.pol as "Пол",
        sum(case when v.id_zab_type=1 then 1 else 0 end) as "Острых",
        sum(case when v.id_zab_type=2 then 1 else 0 end) as "Впервые уст.",
        sum(case when v.id_zab_type=3 then 1 else 0 end) as "Изв. ранее хр.",
        sum(case when v.id_zab_type=4 then 1 else 0 end) as "Обострение хр.",
        sum(case when ac.id_reg_group>1 then 0 else 1 end) as "Состоит на ДУ",
        sum(case when d.id_talon is null then 0 else (d.close_doc - d.begin_doc +1) end) as "Дней нетр.",
        sum(case when d.id_talon is null then 0 else 1 end) as "Случаев нетр."
from talon t
join period_list p on p.begin_period=date_trunc('month', t.open_date)::date and p.id_period between 858 and 870
join amb_card ac on ac.id_card=t.id_card
join age_group ag on date_part('year', age(t.open_date, ac.b_date)) between ag.from_age and ag.to_age
join visit v on v.id_talon=t.id_talon
join mkb m on m.id_mkb=v.id_mkb
join mkb_class cls on cls.id_mkb_int=m.id_mkb_int
left join document d on d.id_talon=t.id_talon
group by 1, 2, 3, 4, 5
order by 1, 2, 3, 4, 5;

-- Заболеваемость (витрина)
select ag.from_age as "с",
	ag.to_age as "до",
	left(ag.name_age_group, 18) as "Возрастная группа",
	left(cls.name_mkb_class, 32) as "Заболевание",
	rz.pol_patient as "Пол",
	sum(rz.acute_zab) as "Острых",
	sum(rz.primary_zab) as "Впервые уст.",
	sum(rz.chronic_zab) as "Изв. ранее хр.",
	sum(rz.repeated_zab) as "Обострение хр.",
	sum(rz.cnt_register) as "Состоит на ДУ",
	sum(rz.days_zab) as "Дней нетр.",
	sum(rz.cnt_zab) as "Случаев нетр."
from report_zab rz
join period_list p on p.id_period=rz.id_period and p.id_period between 858 and 870
join age_group ag on ag.id_age_group=rz.id_age_group
join mkb m on m.id_mkb=rz.id_mkb
join mkb_class cls on cls.id_mkb_int=m.id_mkb_int
group by 1, 2, 3, 4, 5
order by 1, 2, 3, 4, 5;




------------------------------------------------------------------------------------------------------
-- Для презентации
------------------------------------------------------------------------------------------------------

-- Отчёт о заболеваемости за 2023 год (одинаковый результат расчёта и витрины)

 с  | до  | Возрастная группа  |           Заболевание            | Пол | Острых | Впервые уст. | Изв. ранее хр. | Обострение хр. | Состоит на ДУ | Дней нетр. | Случаев нетр.
----+-----+--------------------+----------------------------------+-----+--------+--------------+----------------+----------------+---------------+------------+---------------
  0 |  17 | дети и подростки   | Болезни глаза и его придаточного | ж   |     28 |           32 |             29 |             31 |            22 |         65 |            13
  0 |  17 | дети и подростки   | Болезни глаза и его придаточного | м   |     73 |           77 |             74 |             85 |            69 |        165 |            33
  0 |  17 | дети и подростки   | Болезни костно-мышечной системы  | ж   |     17 |           23 |             25 |             28 |            13 |         25 |             5
  0 |  17 | дети и подростки   | Болезни костно-мышечной системы  | м   |     56 |           76 |             74 |             77 |            59 |        105 |            21
  0 |  17 | дети и подростки   | Болезни мочеполовой системы      | ж   |     30 |           27 |             22 |             29 |            28 |         35 |             7
  0 |  17 | дети и подростки   | Болезни мочеполовой системы      | м   |     90 |           73 |             79 |             79 |            72 |         85 |            17
  0 |  17 | дети и подростки   | Болезни органов дыхания          | ж   |   1164 |         1255 |           1249 |           1275 |          1083 |       2155 |           431
  0 |  17 | дети и подростки   | Болезни органов дыхания          | м   |   3560 |         3567 |           3564 |           3772 |          2849 |       5465 |          1093
  0 |  17 | дети и подростки   | Болезни органов пищеварения      | ж   |     88 |           76 |             68 |             86 |            63 |        115 |            23
  0 |  17 | дети и подростки   | Болезни органов пищеварения      | м   |    272 |          225 |            235 |            237 |           199 |        255 |            51
  0 |  17 | дети и подростки   | Болезни системы кровообращения   | ж   |     25 |           23 |             24 |             25 |            15 |         40 |             8
  0 |  17 | дети и подростки   | Болезни системы кровообращения   | м   |     64 |           80 |             82 |             78 |            51 |        100 |            20
  0 |  17 | дети и подростки   | Болезни уха и сосцевидного отрос | ж   |     31 |           22 |             22 |             27 |            28 |         45 |             9
  0 |  17 | дети и подростки   | Болезни уха и сосцевидного отрос | м   |     79 |           91 |             78 |             73 |            64 |        125 |            25
  0 |  17 | дети и подростки   | Болезни эндокринной системы, рас | ж   |     78 |           80 |             66 |             92 |            59 |        145 |            29
  0 |  17 | дети и подростки   | Болезни эндокринной системы, рас | м   |    219 |          213 |            211 |            240 |           182 |        310 |            62
  0 |  17 | дети и подростки   | Травмы, отравления и некоторые д | ж   |    346 |          321 |            340 |            314 |           272 |       1295 |           259
  0 |  17 | дети и подростки   | Травмы, отравления и некоторые д | м   |    999 |          908 |            985 |            991 |           753 |       3405 |           681
 18 |  44 | молодой возраст    | Болезни глаза и его придаточного | ж   |   1644 |         1565 |           1613 |           1532 |          1257 |       2110 |           422
 18 |  44 | молодой возраст    | Болезни глаза и его придаточного | м   |   4821 |         4848 |           4773 |           4753 |          3925 |       6350 |          1270
 18 |  44 | молодой возраст    | Болезни костно-мышечной системы  | ж   |   1633 |         1675 |           1618 |           1577 |          1290 |       2370 |           474
 18 |  44 | молодой возраст    | Болезни костно-мышечной системы  | м   |   4809 |         4938 |           4970 |           4828 |          3993 |       6695 |          1339
 18 |  44 | молодой возраст    | Болезни мочеполовой системы      | ж   |   1687 |         1664 |           1624 |           1580 |          1297 |       2310 |           462
 18 |  44 | молодой возраст    | Болезни мочеполовой системы      | м   |   5041 |         4821 |           4772 |           4841 |          3980 |       6465 |          1293
 18 |  44 | молодой возраст    | Болезни органов дыхания          | ж   |  79152 |        79481 |          79246 |          79071 |         63292 |     113810 |         22762
 18 |  44 | молодой возраст    | Болезни органов дыхания          | м   | 237155 |       236804 |         237189 |         236472 |        189627 |     338245 |         67649
 18 |  44 | молодой возраст    | Болезни органов пищеварения      | ж   |   4858 |         4879 |           4978 |           4919 |          3939 |       6230 |          1246
 18 |  44 | молодой возраст    | Болезни органов пищеварения      | м   |  14702 |        14681 |          14390 |          14562 |         11487 |      20445 |          4089
 18 |  44 | молодой возраст    | Болезни системы кровообращения   | ж   |   1638 |         1601 |           1690 |           1601 |          1323 |       2240 |           448
 18 |  44 | молодой возраст    | Болезни системы кровообращения   | м   |   4917 |         4949 |           4922 |           4847 |          3904 |       6865 |          1373
 18 |  44 | молодой возраст    | Болезни уха и сосцевидного отрос | ж   |   1611 |         1550 |           1687 |           1624 |          1321 |       2240 |           448
 18 |  44 | молодой возраст    | Болезни уха и сосцевидного отрос | м   |   4886 |         4795 |           4828 |           4881 |          3776 |       6950 |          1390
 18 |  44 | молодой возраст    | Болезни эндокринной системы, рас | ж   |   4929 |         4925 |           4951 |           4906 |          3917 |       6470 |          1294
 18 |  44 | молодой возраст    | Болезни эндокринной системы, рас | м   |  14484 |        14688 |          14472 |          14635 |         11842 |      19900 |          3980
 18 |  44 | молодой возраст    | Травмы, отравления и некоторые д | ж   |  21101 |        20658 |          20950 |          21206 |         16887 |      69935 |         13987
 18 |  44 | молодой возраст    | Травмы, отравления и некоторые д | м   |  62518 |        62698 |          62611 |          62725 |         50555 |     209495 |         41899
 45 |  59 | средний возраст    | Болезни глаза и его придаточного | ж   |   1359 |         1367 |           1389 |           1394 |          1120 |       1900 |           380
 45 |  59 | средний возраст    | Болезни глаза и его придаточного | м   |   4121 |         4129 |           4079 |           4231 |          3308 |       6030 |          1206
 45 |  59 | средний возраст    | Болезни костно-мышечной системы  | ж   |   1350 |         1368 |           1365 |           1374 |          1086 |       1695 |           339
 45 |  59 | средний возраст    | Болезни костно-мышечной системы  | м   |   4175 |         4195 |           4162 |           4157 |          3446 |       5740 |          1148
 45 |  59 | средний возраст    | Болезни мочеполовой системы      | ж   |   1440 |         1334 |           1352 |           1377 |          1099 |       1825 |           365
 45 |  59 | средний возраст    | Болезни мочеполовой системы      | м   |   4126 |         4277 |           4167 |           4079 |          3307 |       5675 |          1135
 45 |  59 | средний возраст    | Болезни органов дыхания          | ж   |  66664 |        67049 |          66627 |          67087 |         53036 |      97520 |         19504
 45 |  59 | средний возраст    | Болезни органов дыхания          | м   | 199689 |       200119 |         199872 |         199435 |        159486 |     287140 |         57428
 45 |  59 | средний возраст    | Болезни органов пищеварения      | ж   |   4212 |         4097 |           3971 |           4097 |          3332 |       5660 |          1132
 45 |  59 | средний возраст    | Болезни органов пищеварения      | м   |  12466 |        12400 |          12291 |          12458 |         10084 |      16865 |          3373





select ag.from_age as "с",
        ag.to_age as "до",
        left(ag.name_age_group, 18) as "Возрастная группа",
        left(cls.name_mkb_class, 32) as "Заболевание",
        ac.pol as "Пол",
        sum(case when v.id_zab_type=1 then 1 else 0 end) as "Острых",
        sum(case when v.id_zab_type=2 then 1 else 0 end) as "Впервые уст.",
        sum(case when v.id_zab_type=3 then 1 else 0 end) as "Изв. ранее хр.",
        sum(case when v.id_zab_type=4 then 1 else 0 end) as "Обострение хр.",
        sum(case when ac.id_reg_group>1 then 0 else 1 end) as "Состоит на ДУ",
        sum(case when d.id_talon is null then 0 else (d.close_doc - d.begin_doc +1) end) as "Дней нетр.",
        sum(case when d.id_talon is null then 0 else 1 end) as "Случаев нетр."
from talon t
join period_list p on p.begin_period=date_trunc('month', t.open_date)::date and p.id_period between 858 and 870
join amb_card ac on ac.id_card=t.id_card
join age_group ag on date_part('year', age(t.open_date, ac.b_date)) between ag.from_age and ag.to_age
join visit v on v.id_talon=t.id_talon
join mkb m on m.id_mkb=v.id_mkb
join mkb_class cls on cls.id_mkb_int=m.id_mkb_int
left join document d on d.id_talon=t.id_talon
group by 1, 2, 3, 4, 5
order by 1, 2, 3, 4, 5;


---AS IS CONFIG
                                                                                            QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3939658.18..3939658.84 rows=264 width=131) (actual time=511682.500..512144.069 rows=108 loops=1)
   Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   Sort Method: quicksort  Memory: 45kB
   ->  HashAggregate  (cost=3939642.94..3939647.56 rows=264 width=131) (actual time=511682.115..512143.717 rows=108 loops=1)
         Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), ac.pol
         Batches: 1  Memory Usage: 69kB
         ->  Nested Loop  (cost=1292425.69..3819141.48 rows=2536873 width=95) (actual time=484250.159..510002.166 rows=4445018 loops=1)
               Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND
                            (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
               Rows Removed by Join Filter: 22225090
               ->  Gather  (cost=1292425.69..2829760.06 rows=3805309 width=127) (actual time=484248.392..485755.962 rows=4445018 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Hash Join  (cost=1291425.69..2448229.16 rows=1585545 width=127) (actual time=484331.403..491314.796 rows=1481673 loops=3)
                           Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                           ->  Parallel Hash Join  (cost=1291414.95..2425917.60 rows=1718761 width=35) (actual time=483273.050..489709.704 rows=1481673 loops=3)
                                 Hash Cond: (v.id_talon = t.id_talon)
                                 ->  Parallel Seq Scan on visit v  (cost=0.00..726227.77 rows=26442477 width=12) (actual time=3.480..229585.387 rows=20806005 loops=3)
                                 ->  Parallel Hash  (cost=1261226.57..1261226.57 rows=1561230 width=31) (actual time=247751.542..247751.554 rows=1377502 loops=3)
                                       Buckets: 131072  Batches: 64  Memory Usage: 4640kB
                                       ->  Parallel Hash Left Join  (cost=336172.66..1261226.57 rows=1561230 width=31) (actual time=241956.007..247426.721 rows=1377502 loops=3)
                                             Hash Cond: (t.id_talon = d.id_talon)
                                             ->  Parallel Hash Join  (cost=249452.35..1141619.04 rows=1561230 width=19) (actual time=227088.658..233382.640 rows=1377502 loops=3)
                                                   Hash Cond: (t.id_card = ac.id_card)
                                                   ->  Hash Join  (cost=2.06..859760.52 rows=1561230 width=12) (actual time=1.455..128949.466 rows=1377502 loops=3)
                                                         Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                         ->  Parallel Seq Scan on talon t  (cost=0.00..664004.23 rows=24018923 width=12) (actual time=1.324..122333.411 rows=19215007 loops=3)
                                                         ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.055..0.056 rows=13 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.041..0.044 rows=13 loops=3)
                                                                     Filter: ((id_period >= 858) AND (id_period <= 870))
                                                                     Rows Removed by Filter: 47
                                                   ->  Parallel Hash  (cost=202952.02..202952.02 rows=2674902 width=15) (actual time=97599.600..97599.601 rows=2139946 loops=3)
                                                         Buckets: 262144  Batches: 64  Memory Usage: 6816kB
                                                         ->  Parallel Seq Scan on amb_card ac  (cost=0.00..202952.02 rows=2674902 width=15) (actual time=0.875..96885.136 rows=2139946 loops=3)
                                             ->  Parallel Hash  (cost=49366.58..49366.58 rows=2148858 width=12) (actual time=8082.563..8082.564 rows=1719121 loops=3)
                                                   Buckets: 262144  Batches: 64  Memory Usage: 5888kB
                                                   ->  Parallel Seq Scan on document d  (cost=0.00..49366.58 rows=2148858 width=12) (actual time=3.209..7742.759 rows=1719121 loops=3)
                           ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=1058.206..1058.208 rows=205 loops=3)
                                 Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                 ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=1057.456..1058.148 rows=205 loops=3)
                                       Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                       ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.403..1.043 rows=205 loops=3)
                                       ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=1057.004..1057.005 rows=22 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                             ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=1056.961..1056.970 rows=22 loops=3)
               ->  Materialize  (cost=0.00..1.09 rows=6 width=86) (actual time=0.000..0.000 rows=6 loops=4445018)
                     ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=86) (actual time=1.714..1.717 rows=6 loops=1)
 Planning Time: 148.589 ms
 JIT:
   Functions: 170
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 26.388 ms, Inlining 428.206 ms, Optimization 1904.219 ms, Emission 838.198 ms, Total 3197.011 ms
 Execution Time: 512174.448 ms
(53 rows)



                                                                                                                                                             QUERY PLAN

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3939658.18..3939658.84 rows=264 width=131) (actual time=460310.774..460759.175 rows=108 loops=1)
   Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   Sort Method: quicksort  Memory: 45kB
   ->  HashAggregate  (cost=3939642.94..3939647.56 rows=264 width=131) (actual time=460310.437..460758.874 rows=108 loops=1)
         Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), ac.pol
         Batches: 1  Memory Usage: 69kB
         ->  Nested Loop  (cost=1292425.69..3819141.48 rows=2536873 width=95) (actual time=427986.041..458440.224 rows=4445018 loops=1)
               Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
               Rows Removed by Join Filter: 22225090
               ->  Gather  (cost=1292425.69..2829760.06 rows=3805309 width=127) (actual time=427985.997..431552.309 rows=4445018 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Hash Join  (cost=1291425.69..2448229.16 rows=1585545 width=127) (actual time=427901.083..437257.413 rows=1481673 loops=3)
                           Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                           ->  Parallel Hash Join  (cost=1291414.95..2425917.60 rows=1718761 width=35) (actual time=426661.762..435406.777 rows=1481673 loops=3)
                                 Hash Cond: (v.id_talon = t.id_talon)
                                 ->  Parallel Seq Scan on visit v  (cost=0.00..726227.77 rows=26442477 width=12) (actual time=17.199..214972.141 rows=20806005 loops=3)
                                 ->  Parallel Hash  (cost=1261226.57..1261226.57 rows=1561230 width=31) (actual time=204811.912..204812.069 rows=1377502 loops=3)
                                       Buckets: 131072  Batches: 64  Memory Usage: 4640kB
                                       ->  Parallel Hash Left Join  (cost=336172.66..1261226.57 rows=1561230 width=31) (actual time=201853.341..204234.906 rows=1377502 loops=3)
                                             Hash Cond: (t.id_talon = d.id_talon)
                                             ->  Parallel Hash Join  (cost=249452.35..1141619.04 rows=1561230 width=19) (actual time=191530.486..193023.202 rows=1377502 loops=3)
                                                   Hash Cond: (t.id_card = ac.id_card)
                                                   ->  Hash Join  (cost=2.06..859760.52 rows=1561230 width=12) (actual time=0.798..129737.543 rows=1377502 loops=3)
                                                         Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                         ->  Parallel Seq Scan on talon t  (cost=0.00..664004.23 rows=24018923 width=12) (actual time=0.645..122605.928 rows=19215007 loops=3)
                                                         ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.061..0.062 rows=13 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.051..0.053 rows=13 loops=3)
                                                                     Filter: ((id_period >= 858) AND (id_period <= 870))
                                                                     Rows Removed by Filter: 47
                                                   ->  Parallel Hash  (cost=202952.02..202952.02 rows=2674902 width=15) (actual time=61380.051..61380.052 rows=2139946 loops=3)
                                                         Buckets: 262144  Batches: 64  Memory Usage: 6816kB
                                                         ->  Parallel Seq Scan on amb_card ac  (cost=0.00..202952.02 rows=2674902 width=15) (actual time=7.448..60804.818 rows=2139946 loops=3)
                                             ->  Parallel Hash  (cost=49366.58..49366.58 rows=2148858 width=12) (actual time=8104.135..8104.136 rows=1719121 loops=3)
                                                   Buckets: 262144  Batches: 64  Memory Usage: 5888kB
                                                   ->  Parallel Seq Scan on document d  (cost=0.00..49366.58 rows=2148858 width=12) (actual time=0.692..7745.204 rows=1719121 loops=3)
                           ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=1239.144..1239.147 rows=205 loops=3)
                                 Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                 ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=1238.994..1239.082 rows=205 loops=3)
                                       Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                       ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.026..0.058 rows=205 loops=3)
                                       ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=1238.918..1238.919 rows=22 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                             ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=1238.872..1238.882 rows=22 loops=3)
               ->  Materialize  (cost=0.00..1.09 rows=6 width=86) (actual time=0.000..0.000 rows=6 loops=4445018)
                     ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=86) (actual time=0.015..0.017 rows=6 loops=1)
 Planning Time: 2.010 ms
 JIT:
   Functions: 170
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 20.178 ms, Inlining 384.120 ms, Optimization 2016.462 ms, Emission 1316.712 ms, Total 3737.472 ms
 Execution Time: 460763.011 ms
(53 rows)






                                                                                         QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3939658.18..3939658.84 rows=264 width=131) (actual time=345625.136..349114.700 rows=108 loops=1)
   Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   Sort Method: quicksort  Memory: 45kB
   ->  HashAggregate  (cost=3939642.94..3939647.56 rows=264 width=131) (actual time=345624.727..349114.334 rows=108 loops=1)
         Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), ac.pol
         Batches: 1  Memory Usage: 69kB
         ->  Nested Loop  (cost=1292425.69..3819141.48 rows=2536873 width=95) (actual time=308958.596..346801.220 rows=4445018 loops=1)
               Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND
                            (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
               Rows Removed by Join Filter: 22225090
               ->  Gather  (cost=1292425.69..2829760.06 rows=3805309 width=127) (actual time=308950.733..319920.523 rows=4445018 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Hash Join  (cost=1291425.69..2448229.16 rows=1585545 width=127) (actual time=308916.319..323174.079 rows=1481673 loops=3)
                           Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                           ->  Parallel Hash Join  (cost=1291414.95..2425917.60 rows=1718761 width=35) (actual time=307662.446..321302.421 rows=1481673 loops=3)
                                 Hash Cond: (v.id_talon = t.id_talon)
                                 ->  Parallel Seq Scan on visit v  (cost=0.00..726227.77 rows=26442477 width=12) (actual time=1.250..86605.408 rows=20806005 loops=3)
                                 ->  Parallel Hash  (cost=1261226.57..1261226.57 rows=1561230 width=31) (actual time=212619.356..212619.485 rows=1377502 loops=3)
                                       Buckets: 131072  Batches: 64  Memory Usage: 4640kB
                                       ->  Parallel Hash Left Join  (cost=336172.66..1261226.57 rows=1561230 width=31) (actual time=206761.869..212234.439 rows=1377502 loops=3)
                                             Hash Cond: (t.id_talon = d.id_talon)
                                             ->  Parallel Hash Join  (cost=249452.35..1141619.04 rows=1561230 width=19) (actual time=192363.450..198269.848 rows=1377502 loops=3)
                                                   Hash Cond: (t.id_card = ac.id_card)
                                                   ->  Hash Join  (cost=2.06..859760.52 rows=1561230 width=12) (actual time=0.753..127599.246 rows=1377502 loops=3)
                                                         Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                         ->  Parallel Seq Scan on talon t  (cost=0.00..664004.23 rows=24018923 width=12) (actual time=0.624..120383.636 rows=19215007 loops=3)
                                                         ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.050..0.052 rows=13 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.042..0.044 rows=13 loops=3)
                                                                     Filter: ((id_period >= 858) AND (id_period <= 870))
                                                                     Rows Removed by Filter: 47
                                                   ->  Parallel Hash  (cost=202952.02..202952.02 rows=2674902 width=15) (actual time=64188.920..64188.921 rows=2139946 loops=3)
                                                         Buckets: 262144  Batches: 64  Memory Usage: 6816kB
                                                         ->  Parallel Seq Scan on amb_card ac  (cost=0.00..202952.02 rows=2674902 width=15) (actual time=5.234..63421.999 rows=2139946 loops=3)
                                             ->  Parallel Hash  (cost=49366.58..49366.58 rows=2148858 width=12) (actual time=8026.892..8026.893 rows=1719121 loops=3)
                                                   Buckets: 262144  Batches: 64  Memory Usage: 5888kB
                                                   ->  Parallel Seq Scan on document d  (cost=0.00..49366.58 rows=2148858 width=12) (actual time=2.614..7616.308 rows=1719121 loops=3)
                           ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=1251.021..1251.023 rows=205 loops=3)
                                 Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                 ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=1248.920..1250.945 rows=205 loops=3)
                                       Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                       ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.265..2.225 rows=205 loops=3)
                                       ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=1248.601..1248.601 rows=22 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                             ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=1248.549..1248.560 rows=22 loops=3)
               ->  Materialize  (cost=0.00..1.09 rows=6 width=86) (actual time=0.000..0.000 rows=6 loops=4445018)
                     ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=86) (actual time=7.794..7.797 rows=6 loops=1)
 Planning Time: 45.943 ms
 JIT:
   Functions: 170
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 19.025 ms, Inlining 472.520 ms, Optimization 2028.152 ms, Emission 1244.693 ms, Total 3764.390 ms
 Execution Time: 349181.264 ms
(53 rows)









---OPTIMIZATION CONFIG



#------------------------------------------------------------------------------
# OTUS PROJECT OPTIMIZATION
#------------------------------------------------------------------------------
max_connections = 40
shared_buffers = 3GB
effective_cache_size = 3GB
maintenance_work_mem = 512MB
wal_buffers = 64MB
default_statistics_target = 500
effective_io_concurrency = 2
work_mem = 256MB
min_wal_size = 4GB
max_wal_size = 16GB




--explain

                                                                                        QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3034569.35..3034570.01 rows=264 width=131)
   Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   ->  HashAggregate  (cost=3034554.11..3034558.73 rows=264 width=131)
         Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), ac.pol
         ->  Hash Join  (cost=1281259.86..2914052.65 rows=2536873 width=95)
               Hash Cond: (t.id_card = ac.id_card)
               Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND
                            (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
               ->  Nested Loop  (cost=960612.17..2514444.79 rows=22831856 width=206)
                     ->  Gather  (cost=960612.17..2229045.54 rows=3805309 width=120)
                           Workers Planned: 2
                           ->  Hash Join  (cost=959612.17..1847514.64 rows=1585545 width=120)
                                 Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                                 ->  Parallel Hash Join  (cost=959601.43..1825203.08 rows=1718761 width=28)
                                       Hash Cond: (v.id_talon = t.id_talon)
                                       ->  Parallel Seq Scan on visit v  (cost=0.00..726227.77 rows=26442477 width=12)
                                       ->  Parallel Hash  (cost=940086.05..940086.05 rows=1561230 width=24)
                                             ->  Parallel Hash Left Join  (cost=76229.37..940086.05 rows=1561230 width=24)
                                                   Hash Cond: (t.id_talon = d.id_talon)
                                                   ->  Hash Join  (cost=2.06..859760.52 rows=1561230 width=12)
                                                         Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                         ->  Parallel Seq Scan on talon t  (cost=0.00..664004.23 rows=24018923 width=12)
                                                         ->  Hash  (cost=1.90..1.90 rows=13 width=4)
                                                               ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4)
                                                                     Filter: ((id_period >= 858) AND (id_period <= 870))
                                                   ->  Parallel Hash  (cost=49366.58..49366.58 rows=2148858 width=12)
                                                         ->  Parallel Seq Scan on document d  (cost=0.00..49366.58 rows=2148858 width=12)
                                 ->  Hash  (cost=8.18..8.18 rows=205 width=100)
                                       ->  Hash Join  (cost=1.50..8.18 rows=205 width=100)
                                             Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                             ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8)
                                             ->  Hash  (cost=1.22..1.22 rows=22 width=100)
                                                   ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100)
                     ->  Materialize  (cost=0.00..1.09 rows=6 width=86)
                           ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=86)
               ->  Hash  (cost=240400.64..240400.64 rows=6419764 width=15)
                     ->  Seq Scan on amb_card ac  (cost=0.00..240400.64 rows=6419764 width=15)
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(39 rows)


--explain analyze

                                                                                          QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3034569.35..3034570.01 rows=264 width=131) (actual time=377472.304..377562.350 rows=108 loops=1)
   Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   Sort Method: quicksort  Memory: 45kB
   ->  HashAggregate  (cost=3034554.11..3034558.73 rows=264 width=131) (actual time=377471.941..377562.027 rows=108 loops=1)
         Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), ac.pol
         Batches: 1  Memory Usage: 69kB
         ->  Hash Join  (cost=1281259.86..2914052.65 rows=2536873 width=95) (actual time=193060.647..375769.014 rows=4445018 loops=1)
               Hash Cond: (t.id_card = ac.id_card)
               Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND
                            (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
               Rows Removed by Join Filter: 22225090
               ->  Nested Loop  (cost=960612.17..2514444.79 rows=22831856 width=206) (actual time=106558.405..267967.618 rows=26670108 loops=1)
                     ->  Gather  (cost=960612.17..2229045.54 rows=3805309 width=120) (actual time=106558.385..263242.396 rows=4445018 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Hash Join  (cost=959612.17..1847514.64 rows=1585545 width=120) (actual time=106502.838..273925.999 rows=1481673 loops=3)
                                 Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                                 ->  Parallel Hash Join  (cost=959601.43..1825203.08 rows=1718761 width=28) (actual time=105909.608..272863.921 rows=1481673 loops=3)
                                       Hash Cond: (v.id_talon = t.id_talon)
                                       ->  Parallel Seq Scan on visit v  (cost=0.00..726227.77 rows=26442477 width=12) (actual time=0.020..158768.794 rows=20806005 loops=3)
                                       ->  Parallel Hash  (cost=940086.05..940086.05 rows=1561230 width=24) (actual time=105429.275..105433.743 rows=1377502 loops=3)
                                             Buckets: 4194304  Batches: 1  Memory Usage: 228640kB
                                             ->  Parallel Hash Left Join  (cost=76229.37..940086.05 rows=1561230 width=24) (actual time=1462.122..104774.768 rows=1377502 loops=3)
                                                   Hash Cond: (t.id_talon = d.id_talon)
                                                   ->  Hash Join  (cost=2.06..859760.52 rows=1561230 width=12) (actual time=1.167..102660.448 rows=1377502 loops=3)
                                                         Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                         ->  Parallel Seq Scan on talon t  (cost=0.00..664004.23 rows=24018923 width=12) (actual time=1.025..95195.824 rows=19215007 loops=3)
                                                         ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.056..0.057 rows=13 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.045..0.048 rows=13 loops=3)
                                                                     Filter: ((id_period >= 858) AND (id_period <= 870))
                                                                     Rows Removed by Filter: 47
                                                   ->  Parallel Hash  (cost=49366.58..49366.58 rows=2148858 width=12) (actual time=1441.927..1441.928 rows=1719121 loops=3)
                                                         Buckets: 8388608  Batches: 1  Memory Usage: 307552kB
                                                         ->  Parallel Seq Scan on document d  (cost=0.00..49366.58 rows=2148858 width=12) (actual time=0.029..372.491 rows=1719121 loops=3)
                                 ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=593.039..593.042 rows=205 loops=3)
                                       Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                       ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=592.879..592.974 rows=205 loops=3)
                                             Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                             ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.016..0.055 rows=205 loops=3)
                                             ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=592.820..592.820 rows=22 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                                   ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=592.790..592.796 rows=22 loops=3)
                     ->  Materialize  (cost=0.00..1.09 rows=6 width=86) (actual time=0.000..0.000 rows=6 loops=4445018)
                           ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=86) (actual time=0.011..0.013 rows=6 loops=1)
               ->  Hash  (cost=240400.64..240400.64 rows=6419764 width=15) (actual time=86474.212..86474.214 rows=6419837 loops=1)
                     Buckets: 8388608  Batches: 1  Memory Usage: 366466kB
                     ->  Seq Scan on amb_card ac  (cost=0.00..240400.64 rows=6419764 width=15) (actual time=620.977..84476.111 rows=6419837 loops=1)
 Planning Time: 1.653 ms
 JIT:
   Functions: 157
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 16.725 ms, Inlining 390.120 ms, Optimization 1265.699 ms, Emission 743.813 ms, Total 2416.356 ms
 Execution Time: 377570.447 ms
(53 rows)







                                                                                                 QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3034569.35..3034570.01 rows=264 width=131) (actual time=310503.357..310559.338 rows=108 loops=1)
   Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   Sort Method: quicksort  Memory: 45kB
   ->  HashAggregate  (cost=3034554.11..3034558.73 rows=264 width=131) (actual time=310503.136..310559.145 rows=108 loops=1)
         Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), ac.pol
         Batches: 1  Memory Usage: 69kB
         ->  Hash Join  (cost=1281259.86..2914052.65 rows=2536873 width=95) (actual time=173483.588..308607.943 rows=4445018 loops=1)
               Hash Cond: (t.id_card = ac.id_card)
               Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND
                            (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
               Rows Removed by Join Filter: 22225090
               ->  Nested Loop  (cost=960612.17..2514444.79 rows=22831856 width=206) (actual time=123898.408..236161.269 rows=26670108 loops=1)
                     ->  Gather  (cost=960612.17..2229045.54 rows=3805309 width=120) (actual time=123898.388..231018.889 rows=4445018 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Hash Join  (cost=959612.17..1847514.64 rows=1585545 width=120) (actual time=123665.830..242190.156 rows=1481673 loops=3)
                                 Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                                 ->  Parallel Hash Join  (cost=959601.43..1825203.08 rows=1718761 width=28) (actual time=123026.223..241026.506 rows=1481673 loops=3)
                                       Hash Cond: (v.id_talon = t.id_talon)
                                       ->  Parallel Seq Scan on visit v  (cost=0.00..726227.77 rows=26442477 width=12) (actual time=2.056..108882.600 rows=20806005 loops=3)
                                       ->  Parallel Hash  (cost=940086.05..940086.05 rows=1561230 width=24) (actual time=123015.605..123015.609 rows=1377502 loops=3)
                                             Buckets: 4194304  Batches: 1  Memory Usage: 228640kB
                                             ->  Parallel Hash Left Join  (cost=76229.37..940086.05 rows=1561230 width=24) (actual time=1493.725..122351.353 rows=1377502 loops=3)
                                                   Hash Cond: (t.id_talon = d.id_talon)
                                                   ->  Hash Join  (cost=2.06..859760.52 rows=1561230 width=12) (actual time=1.136..120162.605 rows=1377502 loops=3)
                                                         Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                         ->  Parallel Seq Scan on talon t  (cost=0.00..664004.23 rows=24018923 width=12) (actual time=1.002..112765.293 rows=19215007 loops=3)
                                                         ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.051..0.052 rows=13 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.041..0.043 rows=13 loops=3)
                                                                     Filter: ((id_period >= 858) AND (id_period <= 870))
                                                                     Rows Removed by Filter: 47
                                                   ->  Parallel Hash  (cost=49366.58..49366.58 rows=2148858 width=12) (actual time=1477.239..1477.240 rows=1719121 loops=3)
                                                         Buckets: 8388608  Batches: 1  Memory Usage: 307584kB
                                                         ->  Parallel Seq Scan on document d  (cost=0.00..49366.58 rows=2148858 width=12) (actual time=0.029..394.412 rows=1719121 loops=3)
                                 ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=639.432..639.434 rows=205 loops=3)
                                       Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                       ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=639.266..639.363 rows=205 loops=3)
                                             Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                             ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.019..0.059 rows=205 loops=3)
                                             ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=636.346..636.347 rows=22 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                                   ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=636.312..636.318 rows=22 loops=3)
                     ->  Materialize  (cost=0.00..1.09 rows=6 width=86) (actual time=0.000..0.000 rows=6 loops=4445018)
                           ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=86) (actual time=0.011..0.013 rows=6 loops=1)
               ->  Hash  (cost=240400.64..240400.64 rows=6419764 width=15) (actual time=49555.085..49555.087 rows=6419837 loops=1)
                     Buckets: 8388608  Batches: 1  Memory Usage: 366466kB
                     ->  Seq Scan on amb_card ac  (cost=0.00..240400.64 rows=6419764 width=15) (actual time=648.475..47484.949 rows=6419837 loops=1)
 Planning Time: 1.982 ms
 JIT:
   Functions: 157
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 20.899 ms, Inlining 386.583 ms, Optimization 1309.914 ms, Emission 859.853 ms, Total 2577.248 ms
 Execution Time: 310582.768 ms
(53 rows)







                                                                                                 QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3034569.35..3034570.01 rows=264 width=131) (actual time=266710.120..266771.479 rows=108 loops=1)
   Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   Sort Method: quicksort  Memory: 45kB
   ->  HashAggregate  (cost=3034554.11..3034558.73 rows=264 width=131) (actual time=266709.849..266771.238 rows=108 loops=1)
         Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), ac.pol
         Batches: 1  Memory Usage: 69kB
         ->  Hash Join  (cost=1281259.86..2914052.65 rows=2536873 width=95) (actual time=179967.487..264607.445 rows=4445018 loops=1)
               Hash Cond: (t.id_card = ac.id_card)
               Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND
                            (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
               Rows Removed by Join Filter: 22225090
               ->  Nested Loop  (cost=960612.17..2514444.79 rows=22831856 width=206) (actual time=130348.603..189339.820 rows=26670108 loops=1)
                     ->  Gather  (cost=960612.17..2229045.54 rows=3805309 width=120) (actual time=130347.736..183369.667 rows=4445018 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Hash Join  (cost=959612.17..1847514.64 rows=1585545 width=120) (actual time=130307.948..194629.208 rows=1481673 loops=3)
                                 Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                                 ->  Parallel Hash Join  (cost=959601.43..1825203.08 rows=1718761 width=28) (actual time=129734.133..193478.383 rows=1481673 loops=3)
                                       Hash Cond: (v.id_talon = t.id_talon)
                                       ->  Parallel Seq Scan on visit v  (cost=0.00..726227.77 rows=26442477 width=12) (actual time=20.575..52710.785 rows=20806005 loops=3)
                                       ->  Parallel Hash  (cost=940086.05..940086.05 rows=1561230 width=24) (actual time=129700.714..129700.719 rows=1377502 loops=3)
                                             Buckets: 4194304  Batches: 1  Memory Usage: 228608kB
                                             ->  Parallel Hash Left Join  (cost=76229.37..940086.05 rows=1561230 width=24) (actual time=8372.405..129008.313 rows=1377502 loops=3)
                                                   Hash Cond: (t.id_talon = d.id_talon)
                                                   ->  Hash Join  (cost=2.06..859760.52 rows=1561230 width=12) (actual time=0.639..119951.828 rows=1377502 loops=3)
                                                         Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                         ->  Parallel Seq Scan on talon t  (cost=0.00..664004.23 rows=24018923 width=12) (actual time=0.506..112532.009 rows=19215007 loops=3)
                                                         ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.049..0.050 rows=13 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.037..0.039 rows=13 loops=3)
                                                                     Filter: ((id_period >= 858) AND (id_period <= 870))
                                                                     Rows Removed by Filter: 47
                                                   ->  Parallel Hash  (cost=49366.58..49366.58 rows=2148858 width=12) (actual time=8350.713..8350.714 rows=1719121 loops=3)
                                                         Buckets: 8388608  Batches: 1  Memory Usage: 307584kB
                                                         ->  Parallel Seq Scan on document d  (cost=0.00..49366.58 rows=2148858 width=12) (actual time=1.698..7566.618 rows=1719121 loops=3)
                                 ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=573.615..573.618 rows=205 loops=3)
                                       Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                       ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=573.134..573.543 rows=205 loops=3)
                                             Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                             ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.279..0.627 rows=205 loops=3)
                                             ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=572.809..572.810 rows=22 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                                   ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=572.769..572.777 rows=22 loops=3)
                     ->  Materialize  (cost=0.00..1.09 rows=6 width=86) (actual time=0.000..0.000 rows=6 loops=4445018)
                           ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=86) (actual time=0.856..0.858 rows=6 loops=1)
               ->  Hash  (cost=240400.64..240400.64 rows=6419764 width=15) (actual time=49587.541..49587.543 rows=6419837 loops=1)
                     Buckets: 8388608  Batches: 1  Memory Usage: 366466kB
                     ->  Seq Scan on amb_card ac  (cost=0.00..240400.64 rows=6419764 width=15) (actual time=700.642..47530.664 rows=6419837 loops=1)
 Planning Time: 103.116 ms
 JIT:
   Functions: 157
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 18.010 ms, Inlining 416.321 ms, Optimization 1185.297 ms, Emission 815.661 ms, Total 2435.289 ms
 Execution Time: 266864.171 ms
(53 rows)


--ИНДЕКСЫ

create index talon_open_date_idx on talon(open_date);
create index visit_visit_date_idx on visit(visit_date);




                                                                                                                                                             QUERY PLAN

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
   Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   Sort Method: quicksort  Memory: 45kB
   ->  HashAggregate  (cost=3013304.36..3013308.98 rows=264 width=131) (actual time=272787.443..272864.791 rows=108 loops=1)
         Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), ac.pol
         Batches: 1  Memory Usage: 69kB
         ->  Hash Join  (cost=1277161.11..2894785.11 rows=2495142 width=95) (actual time=120903.263..270759.496 rows=4445018 loops=1)
               Hash Cond: (t.id_card = ac.id_card)
               Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
               Rows Removed by Join Filter: 22225090
               ->  Nested Loop  (cost=956511.77..2496474.49 rows=22456277 width=206) (actual time=116952.228..242913.043 rows=26670108 loops=1)
                     ->  Gather  (cost=956511.77..2215769.94 rows=3742713 width=120) (actual time=116952.207..237545.898 rows=4445018 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Parallel Hash Left Join  (cost=955511.77..1840498.64 rows=1559464 width=120) (actual time=116893.602..249989.007 rows=1481673 loops=3)
                                 Hash Cond: (t.id_talon = d.id_talon)
                                 ->  Hash Join  (cost=879283.50..1760176.78 rows=1559464 width=112) (actual time=114617.494..246879.213 rows=1481673 loops=3)
                                       Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                                       ->  Parallel Hash Join  (cost=879272.76..1738232.06 rows=1690488 width=20) (actual time=114617.189..246353.634 rows=1481673 loops=3)
                                             Hash Cond: (v.id_talon = t.id_talon)
                                             ->  Parallel Seq Scan on visit v  (cost=0.00..721878.07 rows=26007507 width=12) (actual time=0.581..122261.250 rows=20806005 loops=3)
                                             ->  Parallel Hash  (cost=859757.52..859757.52 rows=1561219 width=12) (actual time=114598.055..114598.058 rows=1377502 loops=3)
                                                   Buckets: 4194304  Batches: 1  Memory Usage: 226720kB
                                                   ->  Hash Join  (cost=2.06..859757.52 rows=1561219 width=12) (actual time=0.842..113859.743 rows=1377502 loops=3)
                                                         Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                         ->  Parallel Seq Scan on talon t  (cost=0.00..664002.58 rows=24018758 width=12) (actual time=0.694..103602.296 rows=19215007 loops=3)
                                                         ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.060..0.061 rows=13 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.046..0.049 rows=13 loops=3)
                                                                     Filter: ((id_period >= 858) AND (id_period <= 870))
                                                                     Rows Removed by Filter: 47
                                       ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=0.231..0.233 rows=205 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                             ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=0.083..0.165 rows=205 loops=3)
                                                   Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                                   ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.021..0.048 rows=205 loops=3)
                                                   ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=0.046..0.047 rows=22 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                                         ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=0.028..0.032 rows=22 loops=3)
                                 ->  Parallel Hash  (cost=49367.01..49367.01 rows=2148901 width=12) (actual time=2255.119..2255.119 rows=1719121 loops=3)
                                       Buckets: 8388608  Batches: 1  Memory Usage: 307584kB
                                       ->  Parallel Seq Scan on document d  (cost=0.00..49367.01 rows=2148901 width=12) (actual time=618.162..1050.807 rows=1719121 loops=3)
                     ->  Materialize  (cost=0.00..1.09 rows=6 width=86) (actual time=0.000..0.000 rows=6 loops=4445018)
                           ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=86) (actual time=0.011..0.012 rows=6 loops=1)
               ->  Hash  (cost=240401.37..240401.37 rows=6419837 width=15) (actual time=3945.037..3945.039 rows=6419837 loops=1)
                     Buckets: 8388608  Batches: 1  Memory Usage: 366466kB
                     ->  Seq Scan on amb_card ac  (cost=0.00..240401.37 rows=6419837 width=15) (actual time=1049.357..2299.087 rows=6419837 loops=1)
 Planning Time: 19.238 ms
 JIT:
   Functions: 157
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 30.690 ms, Inlining 426.955 ms, Optimization 1391.563 ms, Emission 1085.631 ms, Total 2934.839 ms
 Execution Time: 272885.749 ms
(53 rows)




--!!!!!!!!!!!!!
set enable_seqscan = off;



                                                                                                                                                                   QUERY PLAN

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=30070267345.56..30070319413.69 rows=264 width=131) (actual time=415240.947..415986.589 rows=108 loops=1)
   Group Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   ->  Gather Merge  (cost=30070267345.56..30070319393.23 rows=528 width=131) (actual time=415240.814..415986.252 rows=324 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial GroupAggregate  (cost=30070266345.54..30070318332.26 rows=264 width=131) (actual time=413818.555..414582.313 rows=108 loops=3)
               Group Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
               ->  Sort  (cost=30070266345.54..30070268944.64 rows=1039642 width=95) (actual time=413818.479..414060.164 rows=1481673 loops=3)
                     Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
                     Sort Method: quicksort  Memory: 255192kB
                     Worker 0:  Sort Method: quicksort  Memory: 252694kB
                     Worker 1:  Sort Method: quicksort  Memory: 251588kB
                     ->  Merge Join  (cost=30053185830.97..30070162445.51 rows=1039642 width=95) (actual time=317608.545..410306.899 rows=1481673 loops=3)
                           Merge Cond: (t.id_card = ac.id_card)
                           Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
                           Rows Removed by Join Filter: 7408363
                           ->  Sort  (cost=20053185830.38..20053189729.04 rows=1559464 width=120) (actual time=317594.980..317882.048 rows=1481673 loops=3)
                                 Sort Key: t.id_card
                                 Sort Method: quicksort  Memory: 229261kB
                                 Worker 0:  Sort Method: quicksort  Memory: 226781kB
                                 Worker 1:  Sort Method: quicksort  Memory: 226359kB
                                 ->  Hash Join  (cost=20052144525.82..20053025419.09 rows=1559464 width=120) (actual time=176028.557..316809.007 rows=1481673 loops=3)
                                       Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                                       ->  Parallel Hash Join  (cost=10052144503.83..10053003463.13 rows=1690488 width=28) (actual time=174212.382..314604.066 rows=1481673 loops=3)
                                             Hash Cond: (v.id_talon = t.id_talon)
                                             ->  Parallel Seq Scan on visit v  (cost=10000000000.00..10000721878.07 rows=26007507 width=12) (actual time=11.795..131199.306 rows=20806005 loops=3)
                                             ->  Parallel Hash  (cost=52124988.59..52124988.59 rows=1561219 width=24) (actual time=174179.145..174179.149 rows=1377502 loops=3)
                                                   Buckets: 4194304  Batches: 1  Memory Usage: 228672kB
                                                   ->  Nested Loop Left Join  (cost=9.56..52124988.59 rows=1561219 width=24) (actual time=0.241..173197.806 rows=1377502 loops=3)
                                                         ->  Hash Join  (cost=9.13..43381778.50 rows=1561219 width=12) (actual time=0.211..168176.398 rows=1377502 loops=3)
                                                               Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                               ->  Parallel Index Scan using talon_pkey on talon t  (cost=0.56..43186017.06 rows=24018758 width=12) (actual time=0.048..154701.051 rows=19215007 loops=3)
                                                               ->  Hash  (cost=8.40..8.40 rows=13 width=4) (actual time=0.044..0.045 rows=13 loops=3)
                                                                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                     ->  Index Scan using period_list_pkey on period_list p  (cost=0.14..8.40 rows=13 width=4) (actual time=0.029..0.035 rows=13 loops=3)
                                                                           Index Cond: ((id_period >= 858) AND (id_period <= 870))
                                                         ->  Index Scan using document_pkey on document d  (cost=0.43..5.60 rows=1 width=12) (actual time=0.003..0.003 rows=0 loops=4132507)
                                                               Index Cond: (id_talon = t.id_talon)
                                       ->  Hash  (cost=10000000019.43..10000000019.43 rows=205 width=100) (actual time=1816.130..1816.132 rows=205 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                             ->  Hash Join  (cost=10000000012.74..10000000019.43 rows=205 width=100) (actual time=1815.963..1816.058 rows=205 loops=3)
                                                   Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                                   ->  Seq Scan on mkb m  (cost=10000000000.00..10000000006.05 rows=205 width=8) (actual time=0.032..0.064 rows=205 loops=3)
                                                   ->  Hash  (cost=12.47..12.47 rows=22 width=100) (actual time=1815.891..1815.892 rows=22 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                                         ->  Index Scan using mkb_class_pkey on mkb_class cls  (cost=0.14..12.47 rows=22 width=100) (actual time=1815.839..1815.853 rows=22 loops=3)
                           ->  Materialize  (cost=10000000000.43..10016490451.73 rows=38519022 width=101) (actual time=3.575..65423.885 rows=42044536 loops=3)
                                 ->  Nested Loop  (cost=10000000000.43..10016394154.18 rows=38519022 width=101) (actual time=3.569..29381.619 rows=38518921 loops=3)
                                       ->  Index Scan using amb_card_pkey on amb_card ac  (cost=0.43..15912665.33 rows=6419837 width=15) (actual time=3.244..10713.667 rows=6419821 loops=3)
                                       ->  Materialize  (cost=10000000000.00..10000000001.09 rows=6 width=86) (actual time=0.000..0.001 rows=6 loops=19259462)
                                             ->  Seq Scan on age_group ag  (cost=10000000000.00..10000000001.06 rows=6 width=86) (actual time=0.314..0.315 rows=6 loops=3)
 Planning Time: 2.157 ms
 JIT:
   Functions: 192
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 47.380 ms, Inlining 498.628 ms, Optimization 2854.110 ms, Emission 2092.816 ms, Total 5492.934 ms
 Execution Time: 416014.042 ms
(57 rows)



                                                                                                                                                                   QUERY PLAN

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=30070267345.56..30070319413.69 rows=264 width=131) (actual time=422893.327..423564.965 rows=108 loops=1)
   Group Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   ->  Gather Merge  (cost=30070267345.56..30070319393.23 rows=528 width=131) (actual time=422893.195..423564.682 rows=324 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial GroupAggregate  (cost=30070266345.54..30070318332.26 rows=264 width=131) (actual time=421605.698..422432.636 rows=108 loops=3)
               Group Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
               ->  Sort  (cost=30070266345.54..30070268944.64 rows=1039642 width=95) (actual time=421605.617..421859.063 rows=1481673 loops=3)
                     Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
                     Sort Method: quicksort  Memory: 254949kB
                     Worker 0:  Sort Method: quicksort  Memory: 251513kB
                     Worker 1:  Sort Method: quicksort  Memory: 253014kB
                     ->  Merge Join  (cost=30053185830.97..30070162445.51 rows=1039642 width=95) (actual time=324826.883..417810.410 rows=1481673 loops=3)
                           Merge Cond: (t.id_card = ac.id_card)
                           Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
                           Rows Removed by Join Filter: 7408363
                           ->  Sort  (cost=20053185830.38..20053189729.04 rows=1559464 width=120) (actual time=324823.160..325149.371 rows=1481673 loops=3)
                                 Sort Key: t.id_card
                                 Sort Method: quicksort  Memory: 229921kB
                                 Worker 0:  Sort Method: quicksort  Memory: 225606kB
                                 Worker 1:  Sort Method: quicksort  Memory: 226874kB
                                 ->  Hash Join  (cost=20052144525.82..20053025419.09 rows=1559464 width=120) (actual time=185322.911..324034.824 rows=1481673 loops=3)
                                       Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                                       ->  Parallel Hash Join  (cost=10052144503.83..10053003463.13 rows=1690488 width=28) (actual time=183623.849..321947.072 rows=1481673 loops=3)
                                             Hash Cond: (v.id_talon = t.id_talon)
                                             ->  Parallel Seq Scan on visit v  (cost=10000000000.00..10000721878.07 rows=26007507 width=12) (actual time=2.167..129105.329 rows=20806005 loops=3)
                                             ->  Parallel Hash  (cost=52124988.59..52124988.59 rows=1561219 width=24) (actual time=183603.943..183603.947 rows=1377502 loops=3)
                                                   Buckets: 4194304  Batches: 1  Memory Usage: 228672kB
                                                   ->  Nested Loop Left Join  (cost=9.56..52124988.59 rows=1561219 width=24) (actual time=3.638..182636.573 rows=1377502 loops=3)
                                                         ->  Hash Join  (cost=9.13..43381778.50 rows=1561219 width=12) (actual time=0.551..176400.805 rows=1377502 loops=3)
                                                               Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                               ->  Parallel Index Scan using talon_pkey on talon t  (cost=0.56..43186017.06 rows=24018758 width=12) (actual time=0.078..162771.782 rows=19215007 loops=3)
                                                               ->  Hash  (cost=8.40..8.40 rows=13 width=4) (actual time=0.363..0.365 rows=13 loops=3)
                                                                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                     ->  Index Scan using period_list_pkey on period_list p  (cost=0.14..8.40 rows=13 width=4) (actual time=0.350..0.355 rows=13 loops=3)
                                                                           Index Cond: ((id_period >= 858) AND (id_period <= 870))
                                                         ->  Index Scan using document_pkey on document d  (cost=0.43..5.60 rows=1 width=12) (actual time=0.004..0.004 rows=0 loops=4132507)
                                                               Index Cond: (id_talon = t.id_talon)
                                       ->  Hash  (cost=10000000019.43..10000000019.43 rows=205 width=100) (actual time=1698.492..1698.494 rows=205 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                             ->  Hash Join  (cost=10000000012.74..10000000019.43 rows=205 width=100) (actual time=1697.826..1698.426 rows=205 loops=3)
                                                   Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                                   ->  Seq Scan on mkb m  (cost=10000000000.00..10000000006.05 rows=205 width=8) (actual time=3.197..3.740 rows=205 loops=3)
                                                   ->  Hash  (cost=12.47..12.47 rows=22 width=100) (actual time=1694.577..1694.578 rows=22 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                                         ->  Index Scan using mkb_class_pkey on mkb_class cls  (cost=0.14..12.47 rows=22 width=100) (actual time=1694.528..1694.542 rows=22 loops=3)
                           ->  Materialize  (cost=10000000000.43..10016490451.73 rows=38519022 width=101) (actual time=3.612..65600.172 rows=42038138 loops=3)
                                 ->  Nested Loop  (cost=10000000000.43..10016394154.18 rows=38519022 width=101) (actual time=3.607..29812.058 rows=38518971 loops=3)
                                       ->  Index Scan using amb_card_pkey on amb_card ac  (cost=0.43..15912665.33 rows=6419837 width=15) (actual time=2.865..11243.674 rows=6419829 loops=3)
                                       ->  Materialize  (cost=10000000000.00..10000000001.09 rows=6 width=86) (actual time=0.000..0.001 rows=6 loops=19259487)
                                             ->  Seq Scan on age_group ag  (cost=10000000000.00..10000000001.06 rows=6 width=86) (actual time=0.732..0.734 rows=6 loops=3)
 Planning Time: 24.684 ms
 JIT:
   Functions: 192
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 52.057 ms, Inlining 514.153 ms, Optimization 2717.167 ms, Emission 1844.825 ms, Total 5128.201 ms
 Execution Time: 423589.059 ms
(57 rows)




--!!!!!!!!!!!!!
set enable_seqscan = on;

drop index talon_open_date_idx;
drop index visit_visit_date_idx;



                                                                                                   QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3086112.60..3086113.26 rows=264 width=131) (actual time=223199.745..223318.372 rows=108 loops=1)
   Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   Sort Method: quicksort  Memory: 45kB
   ->  HashAggregate  (cost=3086097.36..3086101.98 rows=264 width=131) (actual time=223199.381..223318.050 rows=108 loops=1)
         Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), ac.pol
         Batches: 1  Memory Usage: 69kB
         ->  Hash Join  (cost=1281262.89..2957623.97 rows=2704703 width=95) (actual time=85588.035..221250.279 rows=4445018 loops=1)
               Hash Cond: (t.id_card = ac.id_card)
               Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND
			    (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
               Rows Removed by Join Filter: 22225090
               ->  Nested Loop  (cost=960611.33..2552788.52 rows=24342329 width=206) (actual time=82068.165..193558.929 rows=26670108 loops=1)
                     ->  Gather  (cost=960611.33..2248508.32 rows=4057055 width=120) (actual time=82068.139..188162.277 rows=4445018 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Hash Join  (cost=959611.33..1841802.82 rows=1690440 width=120) (actual time=81951.310..200172.499 rows=1481673 loops=3)
                                 Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                                 ->  Parallel Hash Join  (cost=959600.58..1818548.53 rows=1690440 width=28) (actual time=81268.474..198928.921 rows=1481673 loops=3)
                                       Hash Cond: (v.id_talon = t.id_talon)
                                       ->  Parallel Seq Scan on visit v  (cost=0.00..721870.63 rows=26006763 width=12) (actual time=5.602..107987.936 rows=20806005 loops=3)
                                       ->  Parallel Hash  (cost=940085.28..940085.28 rows=1561224 width=24) (actual time=81250.574..81250.580 rows=1377502 loops=3)
                                             Buckets: 4194304  Batches: 1  Memory Usage: 228640kB
                                             ->  Parallel Hash Left Join  (cost=76230.33..940085.28 rows=1561224 width=24) (actual time=1646.942..80392.571 rows=1377502 loops=3)
                                                   Hash Cond: (t.id_talon = d.id_talon)
                                                   ->  Hash Join  (cost=2.06..859758.80 rows=1561224 width=12) (actual time=1.075..77930.694 rows=1377502 loops=3)
                                                         Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                         ->  Parallel Seq Scan on talon t  (cost=0.00..664003.28 rows=24018828 width=12) (actual time=0.940..65178.179 rows=19215007 loops=3)
                                                         ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.053..0.054 rows=13 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.041..0.044 rows=13 loops=3)
                                                                     Filter: ((id_period >= 858) AND (id_period <= 870))
                                                                     Rows Removed by Filter: 47
                                                   ->  Parallel Hash  (cost=49367.01..49367.01 rows=2148901 width=12) (actual time=1628.472..1628.473 rows=1719121 loops=3)
                                                         Buckets: 8388608  Batches: 1  Memory Usage: 307584kB
                                                         ->  Parallel Seq Scan on document d  (cost=0.00..49367.01 rows=2148901 width=12) (actual time=0.041..496.546 rows=1719121 loops=3)
                                 ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=682.657..682.660 rows=205 loops=3)
                                       Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                       ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=682.479..682.588 rows=205 loops=3)
                                             Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                             ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.024..0.074 rows=205 loops=3)
                                             ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=682.408..682.409 rows=22 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                                   ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=682.370..682.376 rows=22 loops=3)
                     ->  Materialize  (cost=0.00..1.09 rows=6 width=86) (actual time=0.000..0.000 rows=6 loops=4445018)
                           ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=86) (actual time=0.012..0.014 rows=6 loops=1)
               ->  Hash  (cost=240402.36..240402.36 rows=6419936 width=15) (actual time=3514.145..3514.147 rows=6419837 loops=1)
                     Buckets: 8388608  Batches: 1  Memory Usage: 366466kB
                     ->  Seq Scan on amb_card ac  (cost=0.00..240402.36 rows=6419936 width=15) (actual time=634.053..1890.934 rows=6419837 loops=1)
 Planning Time: 32.105 ms
 JIT:
   Functions: 157
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 33.933 ms, Inlining 446.013 ms, Optimization 1266.181 ms, Emission 969.305 ms, Total 2715.432 ms
 Execution Time: 223328.806 ms
(53 rows)




?reindex



                                                                                                                                                             QUERY PLAN

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3086149.68..3086150.34 rows=264 width=131) (actual time=234245.628..234393.910 rows=108 loops=1)
   Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   Sort Method: quicksort  Memory: 45kB
   ->  HashAggregate  (cost=3086134.44..3086139.06 rows=264 width=131) (actual time=234245.407..234393.720 rows=108 loops=1)
         Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), ac.pol
         Batches: 1  Memory Usage: 69kB
         ->  Hash Join  (cost=1281261.53..2957657.34 rows=2704781 width=95) (actual time=92867.736..232406.839 rows=4445018 loops=1)
               Hash Cond: (t.id_card = ac.id_card)
               Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
               Rows Removed by Join Filter: 22225090
               ->  Nested Loop  (cost=960609.97..2552819.49 rows=24343024 width=206) (actual time=89156.440..205571.908 rows=26670108 loops=1)
                     ->  Gather  (cost=960609.97..2248530.59 rows=4057171 width=120) (actual time=89156.418..200390.742 rows=4445018 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Hash Join  (cost=959609.97..1841813.49 rows=1690488 width=120) (actual time=88921.340..211486.881 rows=1481673 loops=3)
                                 Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                                 ->  Parallel Hash Join  (cost=959599.23..1818558.53 rows=1690488 width=28) (actual time=88242.564..210278.340 rows=1481673 loops=3)
                                       Hash Cond: (v.id_talon = t.id_talon)
                                       ->  Parallel Seq Scan on visit v  (cost=0.00..721878.07 rows=26007507 width=12) (actual time=1.309..112552.555 rows=20806005 loops=3)
                                       ->  Parallel Hash  (cost=940083.99..940083.99 rows=1561219 width=24) (actual time=88232.382..88232.387 rows=1377502 loops=3)
                                             Buckets: 4194304  Batches: 1  Memory Usage: 228640kB
                                             ->  Parallel Hash Left Join  (cost=76230.33..940083.99 rows=1561219 width=24) (actual time=1475.013..87397.707 rows=1377502 loops=3)
                                                   Hash Cond: (t.id_talon = d.id_talon)
                                                   ->  Hash Join  (cost=2.06..859757.52 rows=1561219 width=12) (actual time=1.171..85133.581 rows=1377502 loops=3)
                                                         Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                         ->  Parallel Seq Scan on talon t  (cost=0.00..664002.58 rows=24018758 width=12) (actual time=1.040..72808.010 rows=19215007 loops=3)
                                                         ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.055..0.056 rows=13 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.042..0.044 rows=13 loops=3)
                                                                     Filter: ((id_period >= 858) AND (id_period <= 870))
                                                                     Rows Removed by Filter: 47
                                                   ->  Parallel Hash  (cost=49367.01..49367.01 rows=2148901 width=12) (actual time=1458.129..1458.130 rows=1719121 loops=3)
                                                         Buckets: 8388608  Batches: 1  Memory Usage: 307552kB
                                                         ->  Parallel Seq Scan on document d  (cost=0.00..49367.01 rows=2148901 width=12) (actual time=0.036..377.889 rows=1719121 loops=3)
                                 ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=678.542..678.544 rows=205 loops=3)
                                       Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                       ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=678.367..678.473 rows=205 loops=3)
                                             Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                             ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.020..0.064 rows=205 loops=3)
                                             ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=678.302..678.302 rows=22 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                                   ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=678.267..678.273 rows=22 loops=3)
                     ->  Materialize  (cost=0.00..1.09 rows=6 width=86) (actual time=0.000..0.000 rows=6 loops=4445018)
                           ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=86) (actual time=0.010..0.012 rows=6 loops=1)
               ->  Hash  (cost=240402.36..240402.36 rows=6419936 width=15) (actual time=3705.537..3705.540 rows=6419837 loops=1)
                     Buckets: 8388608  Batches: 1  Memory Usage: 366466kB
                     ->  Seq Scan on amb_card ac  (cost=0.00..240402.36 rows=6419936 width=15) (actual time=817.901..2081.043 rows=6419837 loops=1)
 Planning Time: 8.503 ms
 JIT:
   Functions: 157
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 34.235 ms, Inlining 428.455 ms, Optimization 1421.839 ms, Emission 1002.741 ms, Total 2887.269 ms
 Execution Time: 234422.890 ms
(53 rows)




--OPTIMIZATION QUERY

select ag.from_age as "с",
        ag.to_age as "до",
        left(ag.name_age_group, 18) as "Возрастная группа",
        left(cls.name_mkb_class, 32) as "Заболевание",
        ac.pol as "Пол",
        sum(case when v.id_zab_type=1 then 1 else 0 end) as "Острых",
        sum(case when v.id_zab_type=2 then 1 else 0 end) as "Впервые уст.",
        sum(case when v.id_zab_type=3 then 1 else 0 end) as "Изв. ранее хр.",
        sum(case when v.id_zab_type=4 then 1 else 0 end) as "Обострение хр.",
        sum(case when ac.id_reg_group>1 then 0 else 1 end) as "Состоит на ДУ",
        sum(case when d.id_talon is null then 0 else (d.close_doc - d.begin_doc +1) end) as "Дней нетр.",
        sum(case when d.id_talon is null then 0 else 1 end) as "Случаев нетр."
from talon t
join amb_card ac on ac.id_card=t.id_card
join age_group ag on date_part('year', age(t.open_date, ac.b_date)) between ag.from_age and ag.to_age
join visit v on v.id_talon=t.id_talon
join mkb m on m.id_mkb=v.id_mkb
join mkb_class cls on cls.id_mkb_int=m.id_mkb_int
join period_list p on p.begin_period=date_trunc('month', t.open_date)::date and p.id_period between 858 and 870
left join document d on d.id_talon=t.id_talon
group by 1, 2, 3, 4, 5
order by 1, 2, 3, 4, 5;


cost=3086149.68..3086150.34
Execution Time: 230874.824 ms
                                                                                                                                                             QUERY PLAN

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3086149.68..3086150.34 rows=264 width=131) (actual time=233808.436..233918.809 rows=108 loops=1)
   Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   Sort Method: quicksort  Memory: 45kB
   ->  HashAggregate  (cost=3086134.44..3086139.06 rows=264 width=131) (actual time=233808.089..233918.505 rows=108 loops=1)
         Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), ac.pol
         Batches: 1  Memory Usage: 69kB
         ->  Hash Join  (cost=1281261.53..2957657.35 rows=2704781 width=95) (actual time=92924.641..231918.389 rows=4445018 loops=1)
               Hash Cond: (t.id_card = ac.id_card)
               Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
               Rows Removed by Join Filter: 22225090
               ->  Nested Loop  (cost=960609.97..2552819.49 rows=24343026 width=206) (actual time=89358.924..205185.349 rows=26670108 loops=1)
                     ->  Gather  (cost=960609.97..2248530.59 rows=4057171 width=120) (actual time=89358.901..200019.151 rows=4445018 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Hash Join  (cost=959609.97..1841813.49 rows=1690488 width=120) (actual time=89201.370..211720.436 rows=1481673 loops=3)
                                 Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                                 ->  Parallel Hash Join  (cost=959599.23..1818558.53 rows=1690488 width=28) (actual time=88536.954..210523.669 rows=1481673 loops=3)
                                       Hash Cond: (v.id_talon = t.id_talon)
                                       ->  Parallel Seq Scan on visit v  (cost=0.00..721878.07 rows=26007507 width=12) (actual time=9.623..112546.786 rows=20806005 loops=3)
                                       ->  Parallel Hash  (cost=940083.99..940083.99 rows=1561219 width=24) (actual time=88518.561..88518.566 rows=1377502 loops=3)
                                             Buckets: 4194304  Batches: 1  Memory Usage: 228672kB
                                             ->  Parallel Hash Left Join  (cost=76230.33..940083.99 rows=1561219 width=24) (actual time=1574.075..87706.822 rows=1377502 loops=3)
                                                   Hash Cond: (t.id_talon = d.id_talon)
                                                   ->  Hash Join  (cost=2.06..859757.52 rows=1561219 width=12) (actual time=0.977..85331.645 rows=1377502 loops=3)
                                                         Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                         ->  Parallel Seq Scan on talon t  (cost=0.00..664002.58 rows=24018758 width=12) (actual time=0.837..72858.888 rows=19215007 loops=3)
                                                         ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.058..0.060 rows=13 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.046..0.049 rows=13 loops=3)
                                                                     Filter: ((id_period >= 858) AND (id_period <= 870))
                                                                     Rows Removed by Filter: 47
                                                   ->  Parallel Hash  (cost=49367.01..49367.01 rows=2148901 width=12) (actual time=1556.424..1556.425 rows=1719121 loops=3)
                                                         Buckets: 8388608  Batches: 1  Memory Usage: 307552kB
                                                         ->  Parallel Seq Scan on document d  (cost=0.00..49367.01 rows=2148901 width=12) (actual time=0.043..439.714 rows=1719121 loops=3)
                                 ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=660.137..660.140 rows=205 loops=3)
                                       Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                       ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=659.964..660.068 rows=205 loops=3)
                                             Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                             ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.024..0.070 rows=205 loops=3)
                                             ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=659.890..659.890 rows=22 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                                   ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=659.852..659.860 rows=22 loops=3)
                     ->  Materialize  (cost=0.00..1.09 rows=6 width=86) (actual time=0.000..0.000 rows=6 loops=4445018)
                           ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=86) (actual time=0.011..0.013 rows=6 loops=1)
               ->  Hash  (cost=240402.36..240402.36 rows=6419936 width=15) (actual time=3560.013..3560.015 rows=6419837 loops=1)
                     Buckets: 8388608  Batches: 1  Memory Usage: 366466kB
                     ->  Seq Scan on amb_card ac  (cost=0.00..240402.36 rows=6419936 width=15) (actual time=654.946..1928.291 rows=6419837 loops=1)
 Planning Time: 2.030 ms
 JIT:
   Functions: 157
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 11.056 ms, Inlining 396.382 ms, Optimization 1348.033 ms, Emission 890.417 ms, Total 2645.887 ms
 Execution Time: 233930.462 ms
(53 rows)





                                                                                                                                                             QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=3086149.68..3086150.34 rows=264 width=131) (actual time=230760.126..230862.388 rows=108 loops=1)
   Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), ac.pol
   Sort Method: quicksort  Memory: 45kB
   ->  HashAggregate  (cost=3086134.44..3086139.06 rows=264 width=131) (actual time=230759.770..230862.079 rows=108 loops=1)
         Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), ac.pol
         Batches: 1  Memory Usage: 69kB
         ->  Hash Join  (cost=1281261.53..2957657.35 rows=2704781 width=95) (actual time=93014.260..228848.952 rows=4445018 loops=1)
               Hash Cond: (t.id_card = ac.id_card)
               Join Filter: ((date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) >= (ag.from_age)::double precision) AND (date_part('year'::text, age((t.open_date)::timestamp with time zone, (ac.b_date)::timestamp with time zone)) <= (ag.to_age)::double precision))
               Rows Removed by Join Filter: 22225090
               ->  Nested Loop  (cost=960609.97..2552819.49 rows=24343026 width=206) (actual time=89448.982..201923.415 rows=26670108 loops=1)
                     ->  Gather  (cost=960609.97..2248530.59 rows=4057171 width=120) (actual time=89448.951..196665.997 rows=4445018 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Hash Join  (cost=959609.97..1841813.49 rows=1690488 width=120) (actual time=89347.625..208069.000 rows=1481673 loops=3)
                                 Hash Cond: (v.id_mkb = (m.id_mkb)::bpchar)
                                 ->  Parallel Hash Join  (cost=959599.23..1818558.53 rows=1690488 width=28) (actual time=88710.331..206895.262 rows=1481673 loops=3)
                                       Hash Cond: (v.id_talon = t.id_talon)
                                       ->  Parallel Seq Scan on visit v  (cost=0.00..721878.07 rows=26007507 width=12) (actual time=1.463..108636.643 rows=20806005 loops=3)
                                       ->  Parallel Hash  (cost=940083.99..940083.99 rows=1561219 width=24) (actual time=88700.045..88700.050 rows=1377502 loops=3)
                                             Buckets: 4194304  Batches: 1  Memory Usage: 228640kB
                                             ->  Parallel Hash Left Join  (cost=76230.33..940083.99 rows=1561219 width=24) (actual time=1658.007..87893.115 rows=1377502 loops=3)
                                                   Hash Cond: (t.id_talon = d.id_talon)
                                                   ->  Hash Join  (cost=2.06..859757.52 rows=1561219 width=12) (actual time=1.002..85432.114 rows=1377502 loops=3)
                                                         Hash Cond: ((date_trunc('month'::text, (t.open_date)::timestamp with time zone))::date = p.begin_period)
                                                         ->  Parallel Seq Scan on talon t  (cost=0.00..664002.58 rows=24018758 width=12) (actual time=0.869..72994.391 rows=19215007 loops=3)
                                                         ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.056..0.057 rows=13 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.043..0.046 rows=13 loops=3)
                                                                     Filter: ((id_period >= 858) AND (id_period <= 870))
                                                                     Rows Removed by Filter: 47
                                                   ->  Parallel Hash  (cost=49367.01..49367.01 rows=2148901 width=12) (actual time=1640.058..1640.059 rows=1719121 loops=3)
                                                         Buckets: 8388608  Batches: 1  Memory Usage: 307552kB
                                                         ->  Parallel Seq Scan on document d  (cost=0.00..49367.01 rows=2148901 width=12) (actual time=0.042..452.966 rows=1719121 loops=3)
                                 ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=634.344..634.346 rows=205 loops=3)
                                       Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                       ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=634.166..634.272 rows=205 loops=3)
                                             Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                             ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.024..0.071 rows=205 loops=3)
                                             ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=634.089..634.090 rows=22 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                                   ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=634.053..634.059 rows=22 loops=3)
                     ->  Materialize  (cost=0.00..1.09 rows=6 width=86) (actual time=0.000..0.000 rows=6 loops=4445018)
                           ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=86) (actual time=0.017..0.020 rows=6 loops=1)
               ->  Hash  (cost=240402.36..240402.36 rows=6419936 width=15) (actual time=3559.768..3559.770 rows=6419837 loops=1)
                     Buckets: 8388608  Batches: 1  Memory Usage: 366466kB
                     ->  Seq Scan on amb_card ac  (cost=0.00..240402.36 rows=6419936 width=15) (actual time=637.227..1927.400 rows=6419837 loops=1)
 Planning Time: 1.965 ms
 JIT:
   Functions: 157
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 10.647 ms, Inlining 409.750 ms, Optimization 1257.961 ms, Emission 872.026 ms, Total 2550.384 ms
 Execution Time: 230874.824 ms
(53 rows)




--ВИТРИНА

select ag.from_age as "с",
	ag.to_age as "до",
	left(ag.name_age_group, 18) as "Возрастная группа",
	left(cls.name_mkb_class, 32) as "Заболевание",
	rz.pol_patient as "Пол",
	sum(rz.acute_zab) as "Острых",
	sum(rz.primary_zab) as "Впервые уст.",
	sum(rz.chronic_zab) as "Изв. ранее хр.",
	sum(rz.repeated_zab) as "Обострение хр.",
	sum(rz.cnt_register) as "Состоит на ДУ",
	sum(rz.days_zab) as "Дней нетр.",
	sum(rz.cnt_zab) as "Случаев нетр."
from report_zab rz
join period_list p on p.id_period=rz.id_period and p.id_period between 858 and 870
join age_group ag on ag.id_age_group=rz.id_age_group
join mkb m on m.id_mkb=rz.id_mkb
join mkb_class cls on cls.id_mkb_int=m.id_mkb_int
group by 1, 2, 3, 4, 5
order by 1, 2, 3, 4, 5;



                                                                              QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=4116.34..4159.24 rows=264 width=131) (actual time=122.004..125.604 rows=108 loops=1)
   Group Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), rz.pol_patient
   ->  Gather Merge  (cost=4116.34..4146.70 rows=264 width=131) (actual time=121.990..125.482 rows=108 loops=1)
         Workers Planned: 1
         Workers Launched: 1
         ->  Sort  (cost=3116.33..3116.99 rows=264 width=131) (actual time=58.475..58.485 rows=54 loops=2)
               Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), rz.pol_patient
               Sort Method: quicksort  Memory: 45kB
               Worker 0:  Sort Method: quicksort  Memory: 25kB
               ->  Partial HashAggregate  (cost=3101.09..3105.71 rows=264 width=131) (actual time=58.354..58.370 rows=54 loops=2)
                     Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), rz.pol_patient
                     Batches: 1  Memory Usage: 61kB
                     Worker 0:  Batches: 1  Memory Usage: 37kB
                     ->  Hash Join  (cost=13.94..2608.94 rows=16405 width=103) (actual time=0.532..54.599 rows=8346 loops=2)
                           Hash Cond: (rz.id_age_group = ag.id_age_group)
                           ->  Hash Join  (cost=12.81..2411.29 rows=16405 width=131) (actual time=0.495..44.703 rows=8346 loops=2)
                                 Hash Cond: (rz.id_mkb = (m.id_mkb)::bpchar)
                                 ->  Hash Join  (cost=2.06..2174.98 rows=16405 width=39) (actual time=0.407..42.471 rows=8346 loops=2)
                                       Hash Cond: (rz.id_period = p.id_period)
                                       ->  Parallel Seq Scan on report_zab rz  (cost=0.00..1960.13 rows=75713 width=43) (actual time=0.392..35.638 rows=64356 loops=2)
                                       ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.021..0.022 rows=13 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.014..0.016 rows=13 loops=1)
                                                   Filter: ((id_period >= 858) AND (id_period <= 870))
                                                   Rows Removed by Filter: 47
                                 ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=0.167..0.169 rows=205 loops=1)
                                       Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                       ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=0.028..0.118 rows=205 loops=1)
                                             Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                             ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.005..0.031 rows=205 loops=1)
                                             ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=0.017..0.018 rows=22 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                                   ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=0.004..0.008 rows=22 loops=1)
                           ->  Hash  (cost=1.06..1.06 rows=6 width=90) (actual time=0.022..0.022 rows=6 loops=2)
                                 Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                 ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=90) (actual time=0.009..0.010 rows=6 loops=2)
 Planning Time: 8.985 ms
 Execution Time: 125.712 ms
(38 rows)


                                                                              QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=4116.34..4159.24 rows=264 width=131) (actual time=55.160..58.138 rows=108 loops=1)
   Group Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), rz.pol_patient
   ->  Gather Merge  (cost=4116.34..4146.70 rows=264 width=131) (actual time=55.146..57.976 rows=214 loops=1)
         Workers Planned: 1
         Workers Launched: 1
         ->  Sort  (cost=3116.33..3116.99 rows=264 width=131) (actual time=52.292..52.308 rows=107 loops=2)
               Sort Key: ag.from_age, ag.to_age, ("left"((ag.name_age_group)::text, 18)), ("left"((cls.name_mkb_class)::text, 32)), rz.pol_patient
               Sort Method: quicksort  Memory: 45kB
               Worker 0:  Sort Method: quicksort  Memory: 45kB
               ->  Partial HashAggregate  (cost=3101.09..3105.71 rows=264 width=131) (actual time=51.846..51.900 rows=107 loops=2)
                     Group Key: ag.from_age, ag.to_age, "left"((ag.name_age_group)::text, 18), "left"((cls.name_mkb_class)::text, 32), rz.pol_patient
                     Batches: 1  Memory Usage: 61kB
                     Worker 0:  Batches: 1  Memory Usage: 61kB
                     ->  Hash Join  (cost=13.94..2608.94 rows=16405 width=103) (actual time=0.323..44.943 rows=8346 loops=2)
                           Hash Cond: (rz.id_age_group = ag.id_age_group)
                           ->  Hash Join  (cost=12.81..2411.29 rows=16405 width=131) (actual time=0.286..26.390 rows=8346 loops=2)
                                 Hash Cond: (rz.id_mkb = (m.id_mkb)::bpchar)
                                 ->  Hash Join  (cost=2.06..2174.98 rows=16405 width=39) (actual time=0.045..22.234 rows=8346 loops=2)
                                       Hash Cond: (rz.id_period = p.id_period)
                                       ->  Parallel Seq Scan on report_zab rz  (cost=0.00..1960.13 rows=75713 width=43) (actual time=0.008..8.553 rows=64356 loops=2)
                                       ->  Hash  (cost=1.90..1.90 rows=13 width=4) (actual time=0.023..0.024 rows=13 loops=2)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on period_list p  (cost=0.00..1.90 rows=13 width=4) (actual time=0.015..0.018 rows=13 loops=2)
                                                   Filter: ((id_period >= 858) AND (id_period <= 870))
                                                   Rows Removed by Filter: 47
                                 ->  Hash  (cost=8.18..8.18 rows=205 width=100) (actual time=0.221..0.224 rows=205 loops=2)
                                       Buckets: 1024  Batches: 1  Memory Usage: 38kB
                                       ->  Hash Join  (cost=1.50..8.18 rows=205 width=100) (actual time=0.036..0.148 rows=205 loops=2)
                                             Hash Cond: (m.id_mkb_int = cls.id_mkb_int)
                                             ->  Seq Scan on mkb m  (cost=0.00..6.05 rows=205 width=8) (actual time=0.007..0.043 rows=205 loops=2)
                                             ->  Hash  (cost=1.22..1.22 rows=22 width=100) (actual time=0.020..0.020 rows=22 loops=2)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 11kB
                                                   ->  Seq Scan on mkb_class cls  (cost=0.00..1.22 rows=22 width=100) (actual time=0.005..0.010 rows=22 loops=2)
                           ->  Hash  (cost=1.06..1.06 rows=6 width=90) (actual time=0.020..0.021 rows=6 loops=2)
                                 Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                 ->  Seq Scan on age_group ag  (cost=0.00..1.06 rows=6 width=90) (actual time=0.009..0.011 rows=6 loops=2)
 Planning Time: 0.800 ms
 Execution Time: 58.225 ms
(38 rows)



